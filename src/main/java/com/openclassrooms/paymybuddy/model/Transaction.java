package com.openclassrooms.paymybuddy.model;

import lombok.*;

import javax.persistence.*;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;

/**
 * Class that manage the entity transaction
 *
 * @author Christine Duarte
 */
@Entity
//@Data
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Transaction {
    /**
     * Attribute which containing an Integer with the transaction id it's
     * the primary key of the table transaction
     * id autogenerated
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "transaction_id")
    private Integer transactionId;

    /**
     * A Double with the amount of transaction
     * the value cannot  be null, and it must be between 1 and 1000
     */
      private Double amount;

    /**
     * A String with the description of the transaction
     */
    private String description;

    /**
     * A Double with the fees of the transaction
     */
    private Double fees;

    /**
     * A LocaldateTime which containing dote of transaction
     */
    private LocalDateTime date;

    /**
     * A String containing the emitter email,
     * email which emitted the transaction ,
     * it's the foreign key that linked the transaction at the user emitter
     */
//    @Column(name = "emitter_email")/* supprimer*/
//    private String emitterEmail;

    /**
     * A String containing the receiver email,
     * email which received the transaction ,
     * it's the foreign key that linked the transaction at the user receiver
     * this field in the UI cannot be blank
     */
//    @NotBlank(message = "Friend email cannot be null")
//    @Column(name = "receiver_email")/* supprimer*/
//    private String receiverEmail;

    /**
     * An Instance of User that permit joint the table transaction with the table user
     * in the column emitter_email
     * relationship type of many to one
     */
    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JoinColumn(name = "emitter_email")
    private User userEmitter;

    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JoinColumn(name = "receiver_email")
    private User userReceiver;

    @Override
    public String toString() {
        return "Transaction{" +
                "transactionId=" + transactionId +
                ", amount=" + amount +
                ", description='" + description + '\'' +
                ", fees=" + fees +
                ", date=" + date +
                ", userEmitter=" + userEmitter +
                ", userReceiver=" + userReceiver +
                '}';
    }
}
